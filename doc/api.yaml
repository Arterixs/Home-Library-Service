openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_getUsers
      summary: Gets all users
      description: Gets all users
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - User
    post:
      operationId: UserController_createUser
      summary: Create user
      description: Creates a new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - User
  /user/{userId}:
    get:
      operationId: UserController_getUser
      summary: Get user by id
      description: Get single user by id
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. userId is invalid (not uuid)
        '404':
          description: User not found
      tags:
        - User
    put:
      operationId: UserController_changeUser
      summary: Updates a users password by ID
      description: Updates a users password by ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: The user has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. userId is invalid (not uuid)
        '403':
          description: oldPassword is wrong
        '404':
          description: User not found
      tags:
        - User
    delete:
      operationId: UserController_removeUser
      summary: Delete user
      description: Delete user by ID
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: The user has been deleted
        '400':
          description: Bad request. userId is invalid (not uuid)
        '404':
          description: User not found
      tags:
        - User
  /track:
    get:
      operationId: TracksController_getAll
      summary: Get tracks list
      description: Gets all library tracks list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags:
        - Track
    post:
      operationId: TracksController_create
      summary: Add new track
      description: Add new track information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Track
  /track/{trackId}:
    get:
      operationId: TracksController_getById
      summary: Get single track by id
      description: Get single track by id
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. trackId is invalid (not uuid)
        '404':
          description: Track was not found.
      tags:
        - Track
    put:
      operationId: TracksController_change
      summary: Update track information
      description: Update library track information by UUID
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: The track has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. trackId is invalid (not uuid)
        '404':
          description: Track was not found
      tags:
        - Track
    delete:
      operationId: TracksController_delete
      summary: Delete track
      description: Delete track from library
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. trackId is invalid (not uuid)
        '404':
          description: Track was not found.
      tags:
        - Track
  /favs:
    get:
      operationId: FavoritesController_getFavs
      summary: Get all favorites
      description: Gets all favorites artists, tracks and albums
      parameters: []
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorites'
      tags:
        - Favs
  /favs/track/{trackId}:
    post:
      operationId: FavoritesController_addTrack
      summary: Add track to the favorites
      description: Add track id to the favorites
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Bad request. trackId is invalid (not uuid)
        '422':
          description: Track with id doesn't exist.
      tags:
        - Favs
    delete:
      operationId: FavoritesController_deleteTrack
      summary: Delete track from favorites
      description: Delete track from favorites
      parameters:
        - name: trackId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. trackId is invalid (not uuid)
        '404':
          description: Track was not found.
      tags:
        - Favs
  /favs/album/{albumId}:
    post:
      operationId: FavoritesController_addAlbum
      summary: Add album to the favorites
      description: Add album id to the favorites
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Bad request. albumId is invalid (not uuid)
        '422':
          description: Album with id doesn't exist.
      tags:
        - Favs
    delete:
      operationId: FavoritesController_deleteAlbum
      summary: Delete album from favorites
      description: Delete album from favorites
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. albumId is invalid (not uuid)
        '404':
          description: Album was not found.
      tags:
        - Favs
  /favs/artist/{artistId}:
    post:
      operationId: FavoritesController_addArtist
      summary: Add artist to the favorites
      description: Add artist id to the favorites
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '422':
          description: Artist with id doesn't exist
      tags:
        - Favs
    delete:
      operationId: FavoritesController_deleteArtist
      summary: Delete artist from favorites
      description: Delete artist from favorites
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '404':
          description: Artist was not found.
      tags:
        - Favs
  /artist:
    get:
      operationId: ArtistsController_getAll
      summary: Get all artists
      description: Gets all artists
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      tags:
        - Artist
    post:
      operationId: ArtistsController_create
      summary: Add new artist
      description: Add new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Artist
  /artist/{artistId}:
    get:
      operationId: ArtistsController_getById
      summary: Get single artist by id
      description: Get single artist by id
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '404':
          description: Artist was not found.
      tags:
        - Artist
    put:
      operationId: ArtistsController_change
      summary: Update artist information
      description: Update artist information by UUID
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: The artist has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '404':
          description: Artist was not found.
      tags:
        - Artist
    delete:
      operationId: ArtistsController_delete
      summary: Delete artist
      description: Delete artist from library
      parameters:
        - name: artistId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '404':
          description: Artist was not found.
      tags:
        - Artist
  /album:
    get:
      operationId: AlbumsController_getAll
      summary: Get albums list
      description: Gets all library albums list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      tags:
        - Album
    post:
      operationId: AlbumsController_create
      summary: Add new album
      description: Add new album information
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Album
  /album/{albumId}:
    get:
      operationId: AlbumsController_getById
      summary: Get single album by id
      description: Gets single album by id
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. albumId is invalid (not uuid)
        '404':
          description: Album was not found
      tags:
        - Album
    put:
      operationId: AlbumsController_change
      summary: Update album information
      description: Update library album information by UUID
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: The album has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. albumId is invalid (not uuid)
        '404':
          description: Album was not found.
      tags:
        - Album
    delete:
      operationId: AlbumsController_delete
      summary: Delete album
      description: Delete album from library
      parameters:
        - name: albumId
          required: true
          in: path
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. albumId is invalid (not uuid)
        '404':
          description: Album was not found.
      tags:
        - Album
info:
  title: Home Library Service
  description: Home music library service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        login:
          type: string
          example: Uncle John
        version:
          type: number
          example: 1
        createdAt:
          type: number
          example: 1655000000
        updatedAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: Uncle John
        password:
          type: string
          example: '12345'
      required:
        - login
        - password
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: '12345'
        newPassword:
          type: string
          example: '56789'
      required:
        - oldPassword
        - newPassword
    Track:
      type: object
      properties:
        id:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        name:
          type: string
          example: Toca Toca
        artistId:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          nullable: true
        albumId:
          type: string
          example: null
          nullable: true
        duration:
          type: number
          example: 160
          description: In seconds
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Toca Toca
        artistId:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          nullable: true
        albumId:
          type: string
          example: null
          nullable: true
        duration:
          type: number
          example: 160
          description: In seconds
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Toca Toca
        artistId:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          nullable: true
        albumId:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          nullable: true
        duration:
          type: number
          example: 320
          description: In seconds
      required:
        - name
        - artistId
        - albumId
        - duration
    Artist:
      type: object
      properties:
        id:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        name:
          type: string
          example: JoJo
        grammy:
          type: boolean
          example: true
      required:
        - id
        - name
        - grammy
    Album:
      type: object
      properties:
        id:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        name:
          type: string
          example: White Spider
        year:
          type: number
          example: 2013
        artistId:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - artists
        - albums
        - tracks
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: LoLo
        grammy:
          type: boolean
          example: false
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: LoLoLLKa
        grammy:
          type: boolean
          example: true
      required:
        - name
        - grammy
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: The Long Dark
        year:
          type: number
          example: 1994
        artistId:
          type: string
          example: null
          nullable: true
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Scooby Doo
        year:
          type: number
          example: 2028
        artistId:
          type: string
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
          nullable: true
      required:
        - name
        - year
        - artistId
